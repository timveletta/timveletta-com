---
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../config';
import ProgressBar from '../components/ProgressBar.astro';
import GoalCard from '../components/GoalCard.astro';

import StravaLogo from '../images/strava.svg';
import BoardGameGeekLogo from '../images/board-game-geek.svg';
import GoodreadsLogo from '../images/goodreads.svg';
import { fade } from 'astro:transitions';

const getBooksRead = async () => {
	try {
		const response = await fetch('https://timveletta.com/api/books-read');
		const data = await response.json();
		return data;
	} catch (err) {
		console.error(err);
		return;
	}
};

const getGamesPlayed = async () => {
	try {
		const response = await fetch('https://timveletta.com/api/games-played');
		const data = await response.json();
		return data;
	} catch (err) {
		console.error(err);
		return;
	}
};

// const getDistanceCycled = async () => {
// 	try {
// 		const response = await fetch('https://timveletta.com/api/distance-cycled');
// 		const data = await response.json();
// 		return data;
// 	} catch (err) {
// 		console.error(err);
// 		return;
// 	}
// };

const booksRead = await getBooksRead();
const gamesPlayed = await getGamesPlayed();
// const distanceCycled = await getDistanceCycled();
const updatedAt = new Date().toLocaleString('en-AU');
const postsThisYear = (await getCollection('blog')).filter(
	(post) => new Date(post.data.pubDate).getFullYear() === 2023
).length;

const secondsComplete =
	(new Date().getTime() - new Date(2023, 0, 1).getTime()) / 1000;
const secondsInYear = 365 * 24 * 60 * 60;
const percentageComplete = Math.round((secondsComplete / secondsInYear) * 100);
---

<!DOCTYPE html>
<html lang="en" transition:animate={fade({ duration: '0.4s' })}>
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body class="bg-slate-100 border-t-8 border-primary">
		<Header />
		<main class="my-12 p-2">
			<div class="container mx-auto grid md:grid-cols-2 grid-cols-1 gap-4">
				<div
					class="bg-white border border-gray-300 rounded-lg p-4 shadow-sm col-span-full"
				>
					<ProgressBar percentage={percentageComplete} />
					<p class="text-sm font-bold text-gray-500 tracking-wide text-right">
						Last updated: {updatedAt}
					</p>
				</div>
				<GoalCard
					value={postsThisYear}
					goal={24}
					measure="Blog Posts Written"
					rationale={"My blog has become a way for me to learn but also to share what I've learned. I want to write at least 24 posts this year."}
				/>
				<GoalCard
					value={booksRead.numBooksRead}
					goal={24}
					measure="Books Read"
					rationale={'I got back into reading late last year and I want to keep it up. I tend to read a mix of dystopian fiction, and non-fiction books about technology, business, and personal development.'}
					image={GoodreadsLogo}
				/>
				<GoalCard
					value={gamesPlayed.gamesPlayed}
					goal={gamesPlayed.totalCollection}
					measure="Board Games Played"
					rationale={"I love board games and have a large collection of them, some of which I haven't played for some time. I want to play each game at least once this year."}
					image={BoardGameGeekLogo}
				/>
				<!-- <GoalCard
					value={Math.round(distanceCycled.distanceCycled)}
					goal={1200}
					measure="Distance Cycled (km)"
					rationale={"I enjoy cycling but didn't find as much time for it last year. I want to get back into it and ride at least 100km per month which seems quite achievable."}
					image={StravaLogo}
				/> -->
			</div>
		</main>
		<Footer />
	</body>
</html>
